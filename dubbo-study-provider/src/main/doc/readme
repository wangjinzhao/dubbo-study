<!-- provider 是为 protocol  service 标签提供缺省配置,当如下两个标签某个key没有配置值,会使用缺省配置-->
    <!-- provider 中所有的配置在 protocol  service都有对应的项目,一般情况不配置 provider标签-->
    <!-- dubbo 服务端的调优基本上就集中在几个参数  iothreads io线程数目,默认不配置，默认是cup个数+1,底层netty进行io的workthread-->
    <!-- dubbo 服务端的调优基本上就集中在几个参数  executes 服务提供者每服务每方法最大可并行执行请求数  由ExecuteLimitFilter 使用信号量进行控制-->

    <!-- dubbo 服务端的调优基本上就集中在几个参数  threads 业务线程数目大小   threadpool  线程池模型:fixed或是cached 或是limited，
    实际上使用这个初始化WrappedChannelHandler 类的executor 属性，定义线程池大小与线程池类型,当netty的channal检查到不同的事件
    比如connected,reviced（从消费者发送过来的事件），会转化为dubbo的Channel包装类型，用该线程池调用并发的调用provider本地的方法-->

    <!-- dubbo 服务端的调优基本上就集中在几个参数  dispatcher，
    如果事件处理的逻辑能迅速完成，并且不会发起新的 IO 请求，比如只是在内存中记个标识，则直接在 IO 线程上处理更快，因为减少了线程池调度。
但如果事件处理逻辑较慢，或者需要发起新的 IO 请求，比如需要查询数据库，则必须派发到线程池，否则 IO 线程阻塞，将导致不能接收其它请求。

all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。
direct 所有消息都不派发到线程池，全部在 IO 线程上直接执行。
message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
connection 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。
-->